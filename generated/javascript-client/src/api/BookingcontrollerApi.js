/**
 * CATBS REST API
 * REST API DESCRIPTION.
 *
 * OpenAPI spec version: API TOS
 * Contact: wojciech.sudul@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Reservation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Reservation'));
  } else {
    // Browser globals (root is window)
    if (!root.CatbsRestApi) {
      root.CatbsRestApi = {};
    }
    root.CatbsRestApi.BookingcontrollerApi = factory(root.CatbsRestApi.ApiClient, root.CatbsRestApi.Reservation);
  }
}(this, function(ApiClient, Reservation) {
  'use strict';

  /**
   * Bookingcontroller service.
   * @module api/BookingcontrollerApi
   * @version API TOS
   */

  /**
   * Constructs a new BookingcontrollerApi. 
   * @alias module:api/BookingcontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelReservationUsingPATCH operation.
     * @callback module:api/BookingcontrollerApi~cancelReservationUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cancelReservation
     * @param {Number} id id
     * @param {module:api/BookingcontrollerApi~cancelReservationUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.cancelReservationUsingPATCH = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelReservationUsingPATCH");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/bookings/reservation/{id}/cancel', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createReservationUsingPOST operation.
     * @callback module:api/BookingcontrollerApi~createReservationUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createReservation
     * @param {module:model/Reservation} reservation reservation
     * @param {module:api/BookingcontrollerApi~createReservationUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createReservationUsingPOST = function(reservation, callback) {
      var postBody = reservation;

      // verify the required parameter 'reservation' is set
      if (reservation === undefined || reservation === null) {
        throw new Error("Missing the required parameter 'reservation' when calling createReservationUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/bookings/reservation/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyBookingsUsingGET operation.
     * @callback module:api/BookingcontrollerApi~getMyBookingsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMyBookings
     * @param {Number} clientId clientId
     * @param {module:api/BookingcontrollerApi~getMyBookingsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getMyBookingsUsingGET = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getMyBookingsUsingGET");
      }


      var pathParams = {
        'clientId': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/bookings/{clientId}/my-bookings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreeningReservationsUsingGET operation.
     * @callback module:api/BookingcontrollerApi~getScreeningReservationsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getScreeningReservations
     * @param {Number} id id
     * @param {module:api/BookingcontrollerApi~getScreeningReservationsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getScreeningReservationsUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getScreeningReservationsUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/bookings/screening/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserBookingsUsingGET operation.
     * @callback module:api/BookingcontrollerApi~getUserBookingsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getUserBookings
     * @param {Number} clientId clientId
     * @param {Boolean} unpaid unpaid
     * @param {Boolean} active active
     * @param {module:api/BookingcontrollerApi~getUserBookingsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getUserBookingsUsingGET = function(clientId, unpaid, active, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getUserBookingsUsingGET");
      }

      // verify the required parameter 'unpaid' is set
      if (unpaid === undefined || unpaid === null) {
        throw new Error("Missing the required parameter 'unpaid' when calling getUserBookingsUsingGET");
      }

      // verify the required parameter 'active' is set
      if (active === undefined || active === null) {
        throw new Error("Missing the required parameter 'active' when calling getUserBookingsUsingGET");
      }


      var pathParams = {
        'clientId': clientId
      };
      var queryParams = {
        'unpaid': unpaid,
        'active': active
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/bookings/user/{clientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReservationUsingPATCH operation.
     * @callback module:api/BookingcontrollerApi~updateReservationUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateReservation
     * @param {Number} id id
     * @param {Boolean} paid paid
     * @param {module:api/BookingcontrollerApi~updateReservationUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateReservationUsingPATCH = function(id, paid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateReservationUsingPATCH");
      }

      // verify the required parameter 'paid' is set
      if (paid === undefined || paid === null) {
        throw new Error("Missing the required parameter 'paid' when calling updateReservationUsingPATCH");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'paid': paid
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/bookings/reservation/{id}/paid', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
