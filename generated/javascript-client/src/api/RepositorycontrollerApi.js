/**
 * CATBS REST API
 * REST API DESCRIPTION.
 *
 * OpenAPI spec version: API TOS
 * Contact: wojciech.sudul@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Movie', 'model/Schedule', 'model/Screening'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Movie'), require('../model/Schedule'), require('../model/Screening'));
  } else {
    // Browser globals (root is window)
    if (!root.CatbsRestApi) {
      root.CatbsRestApi = {};
    }
    root.CatbsRestApi.RepositorycontrollerApi = factory(root.CatbsRestApi.ApiClient, root.CatbsRestApi.Movie, root.CatbsRestApi.Schedule, root.CatbsRestApi.Screening);
  }
}(this, function(ApiClient, Movie, Schedule, Screening) {
  'use strict';

  /**
   * Repositorycontroller service.
   * @module api/RepositorycontrollerApi
   * @version API TOS
   */

  /**
   * Constructs a new RepositorycontrollerApi. 
   * @alias module:api/RepositorycontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addNewMovieUsingPOST operation.
     * @callback module:api/RepositorycontrollerApi~addNewMovieUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addNewMovie
     * @param {module:model/Movie} movie movie
     * @param {module:api/RepositorycontrollerApi~addNewMovieUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.addNewMovieUsingPOST = function(movie, callback) {
      var postBody = movie;

      // verify the required parameter 'movie' is set
      if (movie === undefined || movie === null) {
        throw new Error("Missing the required parameter 'movie' when calling addNewMovieUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/repository/movie', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNewScheduleUsingPOST operation.
     * @callback module:api/RepositorycontrollerApi~addNewScheduleUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addNewSchedule
     * @param {module:model/Schedule} schedule schedule
     * @param {Number} cinemaId cinemaId
     * @param {module:api/RepositorycontrollerApi~addNewScheduleUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.addNewScheduleUsingPOST = function(schedule, cinemaId, callback) {
      var postBody = schedule;

      // verify the required parameter 'schedule' is set
      if (schedule === undefined || schedule === null) {
        throw new Error("Missing the required parameter 'schedule' when calling addNewScheduleUsingPOST");
      }

      // verify the required parameter 'cinemaId' is set
      if (cinemaId === undefined || cinemaId === null) {
        throw new Error("Missing the required parameter 'cinemaId' when calling addNewScheduleUsingPOST");
      }


      var pathParams = {
        'cinemaId': cinemaId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/repository/cinema/{cinemaId}/schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNewScreeningUsingPOST operation.
     * @callback module:api/RepositorycontrollerApi~addNewScreeningUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addNewScreening
     * @param {Number} scheduleId scheduleId
     * @param {module:model/Screening} screening screening
     * @param {module:api/RepositorycontrollerApi~addNewScreeningUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.addNewScreeningUsingPOST = function(scheduleId, screening, callback) {
      var postBody = screening;

      // verify the required parameter 'scheduleId' is set
      if (scheduleId === undefined || scheduleId === null) {
        throw new Error("Missing the required parameter 'scheduleId' when calling addNewScreeningUsingPOST");
      }

      // verify the required parameter 'screening' is set
      if (screening === undefined || screening === null) {
        throw new Error("Missing the required parameter 'screening' when calling addNewScreeningUsingPOST");
      }


      var pathParams = {
        'scheduleId': scheduleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/repository/schedule/{scheduleId}/screening', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActiveMoviesUsingGET operation.
     * @callback module:api/RepositorycontrollerApi~getActiveMoviesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActiveMovies
     * @param {module:api/RepositorycontrollerApi~getActiveMoviesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getActiveMoviesUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/repository/movies/active', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllMoviesUsingGET operation.
     * @callback module:api/RepositorycontrollerApi~getAllMoviesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllMovies
     * @param {module:api/RepositorycontrollerApi~getAllMoviesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getAllMoviesUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/repository/movies/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuditoriumUsingGET operation.
     * @callback module:api/RepositorycontrollerApi~getAuditoriumUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAuditorium
     * @param {Number} cinemaId cinemaId
     * @param {Number} id id
     * @param {module:api/RepositorycontrollerApi~getAuditoriumUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getAuditoriumUsingGET = function(cinemaId, id, callback) {
      var postBody = null;

      // verify the required parameter 'cinemaId' is set
      if (cinemaId === undefined || cinemaId === null) {
        throw new Error("Missing the required parameter 'cinemaId' when calling getAuditoriumUsingGET");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAuditoriumUsingGET");
      }


      var pathParams = {
        'cinemaId': cinemaId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/repository/cinema/{cinemaId}/auditorium/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuditoriumsUsingGET operation.
     * @callback module:api/RepositorycontrollerApi~getAuditoriumsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAuditoriums
     * @param {Number} cinemaId cinemaId
     * @param {module:api/RepositorycontrollerApi~getAuditoriumsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getAuditoriumsUsingGET = function(cinemaId, callback) {
      var postBody = null;

      // verify the required parameter 'cinemaId' is set
      if (cinemaId === undefined || cinemaId === null) {
        throw new Error("Missing the required parameter 'cinemaId' when calling getAuditoriumsUsingGET");
      }


      var pathParams = {
        'cinemaId': cinemaId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/repository/cinema/{cinemaId}/auditoriums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCinemasUsingGET operation.
     * @callback module:api/RepositorycontrollerApi~getCinemasUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCinemas
     * @param {module:api/RepositorycontrollerApi~getCinemasUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getCinemasUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/repository/cinemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMovieByIdUsingGET operation.
     * @callback module:api/RepositorycontrollerApi~getMovieByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMovieById
     * @param {Number} id id
     * @param {module:api/RepositorycontrollerApi~getMovieByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getMovieByIdUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMovieByIdUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/repository/movie/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMoviesByIdsUsingGET operation.
     * @callback module:api/RepositorycontrollerApi~getMoviesByIdsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMoviesByIds
     * @param {Array.<Number>} id id
     * @param {module:api/RepositorycontrollerApi~getMoviesByIdsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getMoviesByIdsUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMoviesByIdsUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/repository/movie', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchedulesInCinemaUsingGET operation.
     * @callback module:api/RepositorycontrollerApi~getSchedulesInCinemaUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSchedulesInCinema
     * @param {Number} cinemaId cinemaId
     * @param {module:api/RepositorycontrollerApi~getSchedulesInCinemaUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getSchedulesInCinemaUsingGET = function(cinemaId, callback) {
      var postBody = null;

      // verify the required parameter 'cinemaId' is set
      if (cinemaId === undefined || cinemaId === null) {
        throw new Error("Missing the required parameter 'cinemaId' when calling getSchedulesInCinemaUsingGET");
      }


      var pathParams = {
        'cinemaId': cinemaId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/repository/cinema/{cinemaId}/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
