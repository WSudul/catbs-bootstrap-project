/**
 * CATBS REST API
 * REST API DESCRIPTION.
 *
 * OpenAPI spec version: API TOS
 * Contact: wojciech.sudul@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ClientLoginData', 'model/ClientRegistration'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ClientLoginData'), require('../model/ClientRegistration'));
  } else {
    // Browser globals (root is window)
    if (!root.CatbsRestApi) {
      root.CatbsRestApi = {};
    }
    root.CatbsRestApi.AccesscontrollerApi = factory(root.CatbsRestApi.ApiClient, root.CatbsRestApi.ClientLoginData, root.CatbsRestApi.ClientRegistration);
  }
}(this, function(ApiClient, ClientLoginData, ClientRegistration) {
  'use strict';

  /**
   * Accesscontroller service.
   * @module api/AccesscontrollerApi
   * @version API TOS
   */

  /**
   * Constructs a new AccesscontrollerApi. 
   * @alias module:api/AccesscontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addNewUserUsingPOST operation.
     * @callback module:api/AccesscontrollerApi~addNewUserUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addNewUser
     * @param {module:model/ClientRegistration} clientRegistration clientRegistration
     * @param {module:api/AccesscontrollerApi~addNewUserUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.addNewUserUsingPOST = function(clientRegistration, callback) {
      var postBody = clientRegistration;

      // verify the required parameter 'clientRegistration' is set
      if (clientRegistration === undefined || clientRegistration === null) {
        throw new Error("Missing the required parameter 'clientRegistration' when calling addNewUserUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/access/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeCredentialsUsingPUT operation.
     * @callback module:api/AccesscontrollerApi~changeCredentialsUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ChangeCredentials
     * @param {module:model/ClientLoginData} loginData loginData
     * @param {module:api/AccesscontrollerApi~changeCredentialsUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.changeCredentialsUsingPUT = function(loginData, callback) {
      var postBody = loginData;

      // verify the required parameter 'loginData' is set
      if (loginData === undefined || loginData === null) {
        throw new Error("Missing the required parameter 'loginData' when calling changeCredentialsUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/access/credentials', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationPolicyUsingGET operation.
     * @callback module:api/AccesscontrollerApi~getRegistrationPolicyUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetRegistrationPolicy
     * @param {module:api/AccesscontrollerApi~getRegistrationPolicyUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getRegistrationPolicyUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/access/register', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the validateCredentialsUsingGET operation.
     * @callback module:api/AccesscontrollerApi~validateCredentialsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ValidateCredentials
     * @param {String} login login
     * @param {String} password password
     * @param {module:api/AccesscontrollerApi~validateCredentialsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.validateCredentialsUsingGET = function(login, password, callback) {
      var postBody = null;

      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling validateCredentialsUsingGET");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling validateCredentialsUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'login': login,
        'password': password
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/access/credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
